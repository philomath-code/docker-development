1. install flask via pip3

pip3 install Flask

2. acquire requirements from pip3 freeze
pip3 freeze > requirements.txt

3. create sample app file
touch app.py

4. add default code to sample app file
from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello, Docker!'

5. test application
python3 -m flask run

6. browse to http://localhost:5000
(---: http://127.0.0.1:5000/)
was the correct website for me

7. create docker file
touch Dockerfile

8. Dockerfile content
FROM python:3.8-slim-buster
WORKDIR /app
COPY requirements.txt requirements.txt
RUN pip3 install -r requirements.txt
COPY ..
CMD ["python3","-m","flask","run","--host=0.0.0.0"]

9. build docker image
docker build --tag python-docker .

10. view local images
docker images

11. if you want, create a new tag
docker tag python-docker:latest python-docker:v1.0.0

12. to remove tag;
docker rmi python-docker:v1.0.0

13. chck to see if tag was removed
docker images

RUN image as container
14. run docker image
docker run --publish 8000:5000 python-docker

#15. run a database in a container
docker volume create mysql
docker volume create mysql_config

16#Now we’ll create a network that our application and database will use to talk to each other. The network is called a user-defined bridge network and gives us a nice DNS lookup service which we can use when creating our connection string.

17#
docker network create mysqlnet
Now we can run MySQL in a container and attach to the volumes and network we created above. Docker pulls the image from Hub and run it for you locally.

docker run -it --rm -d -v mysql:/var/lib/mysql \
  -v mysql_config:/etc/mysql -p 3306:3306 \
  --network mysqlnet \
  --name mysqldb \
  -e MYSQL_ALLOW_EMPTY_PASSWORD=true \
  mysql

  #18 
  Now, let’s make sure that our MySQL database is running and that we can connect to it. Connect to the running MySQL database inside the container using the following command:

$ docker run -it --network mysqlnet --rm mysql mysql -hmysqldb
Enter password: ********

Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8
Server version: 8.0.23 MySQL Community Server - GPL

Copyright (c) 2000, 2021, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql>

#19
Connect the application to the database
python app.py file:

import mysql.connector
import json
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello_world():
  return 'Hello, Docker!'

@app.route('/widgets')
def get_widgets() :
  mydb = mysql.connector.connect(
    host="mysqldb",
    user="root",
    password="p@ssw0rd1",
    database="inventory"
  )
  cursor = mydb.cursor()


  cursor.execute("SELECT * FROM widgets")

  row_headers=[x[0] for x in cursor.description] 

  results = cursor.fetchall()
  json_data=[]
  for result in results:
    json_data.append(dict(zip(row_headers,result)))

  cursor.close()

  return json.dumps(json_data)

@app.route('/initdb')
def db_init():
  mydb = mysql.connector.connect(
    host="mysqldb",
    user="root",
    password="p@ssw0rd1"
  )
  cursor = mydb.cursor()

  cursor.execute("DROP DATABASE IF EXISTS inventory")
  cursor.execute("CREATE DATABASE inventory")
  cursor.close()

  mydb = mysql.connector.connect(
    host="mysqldb",
    user="root",
    password="p@ssw0rd1",
    database="inventory"
  )
  cursor = mydb.cursor()

  cursor.execute("DROP TABLE IF EXISTS widgets")
  cursor.execute("CREATE TABLE widgets (name VARCHAR(255), description VARCHAR(255))")
  cursor.close()

  return 'init database'

if __name__ == "__main__":
  app.run(host ='0.0.0.0')

#20 pre-building image
First, let’s add the mysql-connector-python module to our application using pip.

$ pip3 install mysql-connector-python
$ pip3 freeze -r requirements.txt


#21-building image
$ docker build --tag python-docker .

#22-add container to the database
Now, let’s add the container to the database network and then run our container. This allows us to access the database by its container name.

$ docker run \
  -it --rm -d \
  --network mysqlnet \
  --name rest-server \
  -p 5000:5000 \
  python-docker

  --network: mysqlnet previously created with the two databases. 

23#-test image:
Let’s test that our application is connected to the database and is able to add a note.

$ curl http://localhost:5000/initdb

$ curl --request POST \
  --url http://localhost:5000/widgets \
  --header 'Content-Type: application/x-www-form-urlencoded' \
  --data 'name=widget01' \
  --data 'description=this is a test widget'

#24 - use compose to develop locally
In this section, we’ll create a Compose file to start our python-docker and the MySQL database using a single command. We’ll also set up the Compose file to start the python-docker application in debug mode so that we can connect a debugger to the running process.

Open the python-docker code in your IDE 
or a text editor and create a new file 
named: docker-compose.dev.yml.

#25 docker-compose.dev.yml - content
version: '3.8'

services:
 web:
  build:
   context: .
  ports:
  - 5000:5000
  volumes:
  - ./:/app

 mysqldb:
  image: mysql
  ports:
  - 3306:3306
  environment:
  - MYSQL_ROOT_PASSWORD=p@ssw0rd1
  volumes:
  - mysql:/var/lib/mysql
  - mysql_config:/etc/mysql

volumes:
  mysql:
  mysql_config:

#26
This Compose file is super convenient as we do not have to type all the parameters to pass to the docker run command. We can declaratively do that using a Compose file.

We expose port 5000 so that we can reach the dev web server inside the container. We also map our local source code into the running container to make changes in our text editor and have those changes picked up in the container.

Another really cool feature of using a Compose file is that we have service resolution set up to use the service names. Therefore, we are now able to use “mysqldb” in our connection string. The reason we use “mysqldb” is because that is what we’ve named our MySQL service as in the Compose file.

Now, to start our application and to confirm that it is running properly, run the following command:

$ docker-compose -f docker-compose.dev.yml up --build

We pass the --build flag so Docker will compile our image and then starts the containers.

#27


Now let’s test our API endpoint. Run the following curl command:

$ curl --request GET --url http://localhost:8080/widgets
You should receive the following response:

[]

This is because our database is empty.


CI/CD
